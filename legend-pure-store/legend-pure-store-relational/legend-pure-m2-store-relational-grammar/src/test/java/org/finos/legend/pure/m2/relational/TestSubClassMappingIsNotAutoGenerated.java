// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package org.finos.legend.pure.m2.relational;

import org.finos.legend.pure.m3.tests.RuntimeTestScriptBuilder;
import org.finos.legend.pure.m3.tests.RuntimeVerifier;
import org.junit.jupiter.api.Test;

public class TestSubClassMappingIsNotAutoGenerated extends AbstractPureRelationalTestWithCoreCompiled
{
    private static final String MAIN_SOURCE_ID = "main.pure";
    private static final String TEST_SOURCE_ID = "test.pure";
    private static final String MAIN_SOURCE_CODE = """
            ###Pure
            import test::*;
            
            Class test::Person
            {
               personId : Integer[1];
               personName : String[1];
               firmId : Integer[1];
            }
            
            Class test::Firm
            {
               firmId : Integer[1];
               firmName : String[1];
            }
            
            ###Relational
            Database test::MainDatabase
            (
               Table PersonTable(personId INT PRIMARY KEY, personName VARCHAR(20), firmId INT)  \s
               Table FirmTable(firmId INT PRIMARY KEY, firmName VARCHAR(20))
               Join Person_Firm(PersonTable.firmId = FirmTable.firmId)
            )
            
            ###Mapping
            import test::*;
            
            Mapping test::MainMapping
            ( \s
               Person: Relational
               {
                  scope([MainDatabase]PersonTable)
                  (
                    personId: personId,
                    personName: personName,
                    firmId: firmId
                  )
               }
              \s
               Firm: Relational
               {
                  scope([MainDatabase]FirmTable)
                  (
                    firmId: firmId,
                    firmName: firmName
                  )
               }
            )
            """;

    @Test
    public void testSubClassMappingNotExplicitlyCreated()
    {
        String testSourceCode = """
                ###Pure
                import test::*;
                
                Class test::MyPerson extends Person
                {
                }
                
                Association test::MyPerson_Firm
                {
                   myPerson : test::MyPerson[*];
                   firm : test::Firm[0..1];
                }
                
                ###Relational
                Database test::TestDatabase
                (
                   include test::MainDatabase
                )
                
                ###Mapping
                import test::*;
                
                Mapping test::TestMapping
                ( \s
                   include MainMapping
                  \s
                   MyPerson_Firm: Relational
                   {
                      AssociationMapping
                      (
                         myPerson[test_Firm, test_MyPerson] : [TestDatabase]@Person_Firm,
                         firm[test_MyPerson, test_Firm] : [TestDatabase]@Person_Firm  \s
                      )      \s
                   } \s
                )
                """;
        this.verifyInValidSubClassMapping(testSourceCode);
    }

    @Test
    public void testSubClassMappingExplicitlyCreated()
    {
        String testSourceCode = """
                ###Pure
                import test::*;
                
                Class test::MyPerson extends Person
                {
                }
                
                Association test::MyPerson_Firm
                {
                   myPerson : test::MyPerson[*];
                   firm : test::Firm[0..1];
                }
                
                ###Relational
                Database test::TestDatabase
                (
                   include test::MainDatabase
                )
                
                ###Mapping
                import test::*;
                
                Mapping test::TestMapping
                ( \s
                   include MainMapping
                  \s
                   MyPerson extends [test_Person] : Relational
                   {
                
                   }
                  \s
                   MyPerson_Firm: Relational
                   {
                      AssociationMapping
                      (
                         myPerson[test_Firm, test_MyPerson] : [TestDatabase]@Person_Firm,
                         firm[test_MyPerson, test_Firm] : [TestDatabase]@Person_Firm  \s
                      )      \s
                   } \s
                )
                """;
        this.verifyValidSubClassMapping(testSourceCode);
    }

    private void verifyValidSubClassMapping(String testSourceCode)
    {
        RuntimeVerifier.verifyOperationIsStable(
                new RuntimeTestScriptBuilder()
                        .createInMemorySource(MAIN_SOURCE_ID, MAIN_SOURCE_CODE)
                        .compile(),
                new RuntimeTestScriptBuilder()
                        .createInMemorySource(TEST_SOURCE_ID, testSourceCode)
                        .compile()
                        .deleteSource(TEST_SOURCE_ID)
                        .compile(),
                this.runtime,
                this.functionExecution,
                this.getAdditionalVerifiers()
        );
    }

    private void verifyInValidSubClassMapping(String testSourceCode)
    {
        RuntimeVerifier.verifyOperationIsStable(
                new RuntimeTestScriptBuilder()
                        .createInMemorySource(MAIN_SOURCE_ID, MAIN_SOURCE_CODE)
                        .compile(),
                new RuntimeTestScriptBuilder()
                        .createInMemorySource(TEST_SOURCE_ID, testSourceCode)
                        .compileWithExpectedCompileFailure("Unable to find source class mapping (id:test_MyPerson) for property 'firm' in Association mapping 'MyPerson_Firm'. Make sure that you have specified a valid Class mapping id as the source id and target id, using the syntax 'property[sourceId, targetId]: ...'.",
                                TEST_SOURCE_ID, 32, 10)
                        .deleteSource(TEST_SOURCE_ID)
                        .compile(),
                this.runtime,
                this.functionExecution,
                this.getAdditionalVerifiers()
        );
    }
}
